#include <SPI.h>
#include <GD.h>

#include "walls.h"

PROGMEM prog_uchar WALL_CHARACTERS[] = {
	B00000000, B11111111,
	B00001111, B01010101,
	B00110101, B01010101,
	B00110101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,

	B11111111, B11111111,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,

	B11111111, B00000000,
	B01010101, B11110000,
	B01010101, B01011100,
	B01010101, B01011100,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,

	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,

	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,

	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,

	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B11010101, B01010101,
	B00110101, B01010101,
	B00110101, B01010101,
	B00001111, B01010101,
	B00000000, B11111111,

	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B01010101, B01010101,
	B11111111, B11111111,

	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01010111,
	B01010101, B01011100,
	B01010101, B01011100,
	B01010101, B11110000,
	B11111111, B00000000,
};

PROGMEM const uint16_t WALL_COLOURS[] = {
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
	RGB(  0,   0,   0), RGB(  0, 128,   0), RGB(  0,   0,   0), RGB(255, 255, 255),
};

void Walls::init() {
	// Setting character drawings
	GD.copy(RAM_CHR + 1 * 16, WALL_CHARACTERS, sizeof(WALL_CHARACTERS));

	// Setting colours
	GD.copy(RAM_PAL + 1 * 8, (prog_uchar *)WALL_COLOURS, sizeof(WALL_COLOURS));

	// Drawing walls
	GD.wr(RAM_PIC + 0, 1); GD.fill(RAM_PIC + 1, 2, 48); GD.wr(RAM_PIC + 49, 3);

	for(int i = 1; i < 36; ++ i) {
		GD.wr(RAM_PIC + i * 64 + 0, 4); GD.fill(RAM_PIC + i * 64 + 1, 5, 48); GD.wr(RAM_PIC + i * 64 + 49, 6);
	}

	GD.wr(RAM_PIC + 36 * 64 + 0, 7); GD.fill(RAM_PIC + 36 * 64 + 1, 8, 48); GD.wr(RAM_PIC + 36 * 64 + 49, 9);
}
